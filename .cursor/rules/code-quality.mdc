---
description: Code Quality, Linting, and Formatting
globs: 
---
### **Refined Code Quality, Linting, and Formatting Guidelines**

---

### **Guidelines:**

âœ… **Enforce coding standards** to ensure consistency, readability, and maintainability across the codebase.

---

### **Best Practices:**

#### **1. Use ESLint and Prettier**

ðŸ”¹ **ESLint** â†’ Enforce coding rules and static analysis.  
ðŸ”¹ **Prettier** â†’ Automatically format code to maintain style consistency.  
ðŸ”¹ **Config:** Ensure both tools are integrated with project workflows (`.eslintrc.js` and `.prettierrc`).

#### **2. Automate Linting & Formatting**

ðŸ”¹ **Pre-commit Hooks:** Use `husky` and `lint-staged` to check code before commits.  
ðŸ”¹ **CI Pipeline Checks:** Add ESLint and Prettier as part of the CI workflow to prevent bad code merges.

#### **3. Maintain Readability & Documentation**

ðŸ”¹ **Meaningful Naming:** Use clear, self-explanatory variable and function names.  
ðŸ”¹ **Comments & JSDoc:** Document complex logic and API contracts for better collaboration.  
ðŸ”¹ **Follow Conventions:** Adhere to existing project style guides (e.g., Airbnb, StandardJS).

---

### **Expected Outcome:**

âœ… **A maintainable, clean, and bug-free codebase** that facilitates team collaboration through consistent coding practices.

---

### **Additional Instructions:**

#### **1. Task Analysis & Scratchpad Integration**

ðŸ“Œ **Before generating or modifying code:**  
ðŸ”¹ The assistant **must review** the current Scratchpad content (`scratchpad.md`) to align with existing standards.  
ðŸ”¹ Any new linting or formatting tasks should be documented with **TODO markers**:

- `[X] Setup ESLint config`
- `[ ] Integrate Prettier with CI`

#### **2. Logging Lessons Learned**

ðŸ“Œ **For recurring issues (e.g., misconfigured ESLint rules, formatting inconsistencies):**  
ðŸ”¹ Log observations in the **Lessons** section of `scratchpad.md`.  
ðŸ”¹ Use this knowledge to prevent repeated mistakes in future code reviews.

#### **3. Code Generation & Refactoring**

ðŸ“Œ **When generating or modifying code:**  
ðŸ”¹ **Automatically apply ESLint and Prettier settings.**  
ðŸ”¹ Suggest necessary adjustments to meet coding standards.  
ðŸ”¹ If non-compliant code is detected, provide:

- A **summary of discrepancies**
- **Corrective actions** (e.g., adjust ESLint rules, modify commit hooks)

#### **4. Consistency & Verification**

ðŸ“Œ **Ensure continuous adherence to standards during reviews:**  
ðŸ”¹ Detect and flag inconsistencies.  
ðŸ”¹ Propose a **refactoring plan** and update the Scratchpad with detailed resolution notes.

---

### **Implementation Stack:**

ðŸ“Œ **Tools & Dependencies:**  
âœ… ESLint (`eslint`, `eslint-config-airbnb`, `eslint-plugin-react`, etc.)  
âœ… Prettier (`prettier`, `eslint-config-prettier`, `eslint-plugin-prettier`)  
âœ… Pre-commit Hooks (`husky`, `lint-staged`)  
âœ… CI Integration (`GitHub Actions`, `GitLab CI/CD`, `CircleCI`)

This refined approach ensures **high-quality, scalable, and maintainable** frontend code while integrating AI-assisted automation into the workflow. ðŸš€
