---
description: State Management Guidelines
globs: src/**/*.{ts,tsx}
---
### **State Management Guidelines**

#### **1. Local State Management**

- **React State Hooks**

  ```typescript
  // Simple state
  const [isOpen, setIsOpen] = useState(false);

  // Complex state with reducer
  const [state, dispatch] = useReducer(reducer, initialState);
  ```

#### **2. Form State**

- **React Hook Form**

  ```typescript
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit = (data: FormData) => {
    // Handle form submission
  };
  ```

#### **3. Server State**

- **SWR for Data Fetching**

  ```typescript
  const { data, error, mutate } = useSWR<User>(`/api/users/${id}`, fetcher);

  // Optimistic updates
  const updateUser = async (newData: Partial<User>) => {
    mutate({ ...data, ...newData }, false);
    await api.patch(`/api/users/${id}`, newData);
  };
  ```

#### **4. Context API**

- **Theme Context**

  ```typescript
  interface ThemeContextType {
    theme: Theme;
    setTheme: (theme: Theme) => void;
  }

  const ThemeContext = createContext<ThemeContextType>({
    theme: 'light',
    setTheme: () => null,
  });

  export const ThemeProvider = ({ children }: PropsWithChildren) => {
    const [theme, setTheme] = useState<Theme>('light');

    return (
      <ThemeContext.Provider value={{ theme, setTheme }}>
        {children}
      </ThemeContext.Provider>
    );
  };

  const useTheme = () => {
    const context = useContext(ThemeContext);
    if (!context) {
      throw new Error('useTheme must be used within an ThemeContext');
    }
    return context;
  };
  ```

#### **5. Custom Hooks**

- **State Logic Abstraction**

  ```typescript
  function useToggle(initial = false) {
    const [state, setState] = useState(initial);
    const toggle = useCallback(() => setState((s) => !s), []);

    return [state, toggle] as const;
  }

  function useLocalStorage<T>(key: string, initialValue: T) {
    // Implementation
  }
  ```

#### **6. Modal State**

- **Dialog Management**

  ```typescript
  interface ModalState {
    isOpen: boolean;
    type: ModalType | null;
    data?: unknown;
  }

  const [modal, setModal] = useState<ModalState>({
    isOpen: false,
    type: null,
  });

  const openModal = (type: ModalType, data?: unknown) => {
    setModal({ isOpen: true, type, data });
  };
  ```

#### **7. Best Practices**

- Keep state close to where it's used
- Use context for truly global state
- Implement proper type safety
- Handle loading and error states
- Use SWR for server state
- Abstract common state logic into hooks
- Maintain consistent state patterns
- Document state management decisions

This ensures:
✅ Predictable state updates
✅ Type-safe state management
✅ Efficient state organization
✅ Proper loading states
✅ Consistent error handling

---

### **State Management Best Practices for AI Code Assistant**

- **Guidelines:**  
  • Use appropriate state management solutions (**Context API, Zustand, Redux, MobX, Jotai, Recoil**, or **custom hooks**) to avoid excessive prop drilling and keep global state predictable.  
  • Optimize state usage by determining whether **local, derived, or global state** is necessary before introducing a new state management pattern.

---

### **Best Practices:**

– **Keep Local State Where Possible:**  
  • Store state within components unless it's required globally.  
  • Use **`useState`** for simple, localized state and **`useReducer`** for more complex local state logic.

– **Elevate State Only When Needed:**  
  • Move state to a **higher-level component or Context Provider** only if multiple components need access.  
  • Avoid excessive nesting of providers—group related state providers logically in a dedicated **StateProvider** component.

– **Organize Global State Efficiently:**  
  • Place state logic in `src/contexts/`, with dedicated files for each store or context.  
  • Maintain separate state files/modules for **UI state, business logic, and API responses**.

– **Ensure Immutability:**  
  • Always update state immutably using **spread operators**, **`map`**, or **Immer.js** to prevent unexpected mutations.

– **Optimize State Performance:**  
  • Use **memoization (`useMemo`, `useCallback`)** to prevent unnecessary re-renders.  
  • Optimize expensive state updates by splitting state into smaller, independent units.  
  • Use **React Query/SWR** for caching API responses instead of storing them in global state.

– **Follow a Consistent Naming Convention:**  
  • Use `use` prefix for custom hooks (e.g., `useAuthStore`, `useUserPreferences`).  
  • Define action names clearly in reducers (e.g., `SET_USER`, `TOGGLE_THEME`).

---

### **Outcome:**

• A **predictable, scalable state architecture** that improves maintainability, minimizes unnecessary re-renders, and simplifies debugging as the app grows.

---

### **Additional Instructions:**

- **Task Analysis & Context Awareness:**  
    • Before modifying or suggesting state management changes, analyze the project's existing architecture (e.g., **Redux, Zustand, MobX, Context API**).  
    • If multiple state solutions are used inconsistently, suggest a refactor to a **single, streamlined state management approach**.

- **Logging Reusable Insights:**  
    • If an anti-pattern is detected (e.g., excessive prop drilling, deeply nested providers, unnecessary Redux usage), log a recommendation in **scratchpad.md** for future improvements.  
    • If a custom hook or context is frequently accessed across components, recommend consolidating it into a centralized provider.

- **AI-Driven Refactoring Assistance:**  
    • If state logic can be optimized (e.g., moving **API caching to React Query instead of Redux**), automatically suggest improvements.  
    • Identify **duplicate state logic** and recommend moving it into a shared **custom hook (`src/hooks/`)** for better reusability.
